//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from JSON.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class JSONParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, TYPE=13, IDENTIFIER=14, STRING=15, NUMBER=16, 
		WS=17;
	public const int
		RULE_json = 0, RULE_envelope = 1, RULE_obj = 2, RULE_type_pair = 3, RULE_qualifiedName = 4, 
		RULE_pair = 5, RULE_propname = 6, RULE_array = 7, RULE_value = 8;
	public static readonly string[] ruleNames = {
		"json", "envelope", "obj", "type_pair", "qualifiedName", "pair", "propname", 
		"array", "value"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "'{'", "'}'", "':'", "'['", "'L'", "'.'", "'$'", "']'", "'true'", 
		"'false'", "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "TYPE", "IDENTIFIER", "STRING", "NUMBER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JSON.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static JSONParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JSONParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JSONParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class JsonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnvelopeContext[] envelope() {
			return GetRuleContexts<EnvelopeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnvelopeContext envelope(int i) {
			return GetRuleContext<EnvelopeContext>(i);
		}
		public JsonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.EnterJson(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.ExitJson(this);
		}
	}

	[RuleVersion(0)]
	public JsonContext json() {
		JsonContext _localctx = new JsonContext(Context, State);
		EnterRule(_localctx, 0, RULE_json);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18;
			envelope();
			State = 23;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 19;
				Match(T__0);
				State = 20;
				envelope();
				}
				}
				State = 25;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnvelopeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_pairContext type_pair() {
			return GetRuleContext<Type_pairContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		public EnvelopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_envelope; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.EnterEnvelope(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.ExitEnvelope(this);
		}
	}

	[RuleVersion(0)]
	public EnvelopeContext envelope() {
		EnvelopeContext _localctx = new EnvelopeContext(Context, State);
		EnterRule(_localctx, 2, RULE_envelope);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26;
			Match(T__1);
			State = 27;
			type_pair();
			State = 32;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 28;
				Match(T__0);
				State = 29;
				pair();
				}
				}
				State = 34;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 35;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		public ObjContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.EnterObj(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.ExitObj(this);
		}
	}

	[RuleVersion(0)]
	public ObjContext obj() {
		ObjContext _localctx = new ObjContext(Context, State);
		EnterRule(_localctx, 4, RULE_obj);
		int _la;
		try {
			State = 50;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 37;
				Match(T__1);
				State = 38;
				pair();
				State = 43;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__0) {
					{
					{
					State = 39;
					Match(T__0);
					State = 40;
					pair();
					}
					}
					State = 45;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 46;
				Match(T__2);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 48;
				Match(T__1);
				State = 49;
				Match(T__2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_pairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(JSONParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public Type_pairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_pair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.EnterType_pair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.ExitType_pair(this);
		}
	}

	[RuleVersion(0)]
	public Type_pairContext type_pair() {
		Type_pairContext _localctx = new Type_pairContext(Context, State);
		EnterRule(_localctx, 6, RULE_type_pair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			Match(TYPE);
			State = 53;
			Match(T__3);
			State = 54;
			qualifiedName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(JSONParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(JSONParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(JSONParser.STRING, 0); }
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(Context, State);
		EnterRule(_localctx, 8, RULE_qualifiedName);
		int _la;
		try {
			State = 69;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 58;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__4) {
					{
					State = 56;
					Match(T__4);
					State = 57;
					Match(T__5);
					}
				}

				State = 60;
				Match(IDENTIFIER);
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__6 || _la==T__7) {
					{
					{
					State = 61;
					_la = TokenStream.LA(1);
					if ( !(_la==T__6 || _la==T__7) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 62;
					Match(IDENTIFIER);
					}
					}
					State = 67;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 68;
				Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropnameContext propname() {
			return GetRuleContext<PropnameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public PairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.EnterPair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.ExitPair(this);
		}
	}

	[RuleVersion(0)]
	public PairContext pair() {
		PairContext _localctx = new PairContext(Context, State);
		EnterRule(_localctx, 10, RULE_pair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			propname();
			State = 72;
			Match(T__3);
			State = 73;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropnameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(JSONParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(JSONParser.IDENTIFIER, 0); }
		public PropnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propname; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.EnterPropname(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.ExitPropname(this);
		}
	}

	[RuleVersion(0)]
	public PropnameContext propname() {
		PropnameContext _localctx = new PropnameContext(Context, State);
		EnterRule(_localctx, 12, RULE_propname);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			_la = TokenStream.LA(1);
			if ( !(_la==IDENTIFIER || _la==STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 14, RULE_array);
		int _la;
		try {
			State = 90;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 77;
				Match(T__4);
				State = 78;
				value();
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__0) {
					{
					{
					State = 79;
					Match(T__0);
					State = 80;
					value();
					}
					}
					State = 85;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 86;
				Match(T__8);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 88;
				Match(T__4);
				State = 89;
				Match(T__8);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(JSONParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(JSONParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObjContext obj() {
			return GetRuleContext<ObjContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnvelopeContext envelope() {
			return GetRuleContext<EnvelopeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 16, RULE_value);
		try {
			State = 100;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 92;
				Match(STRING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 93;
				Match(NUMBER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 94;
				obj();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 95;
				envelope();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 96;
				array();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 97;
				Match(T__9);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 98;
				Match(T__10);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 99;
				Match(T__11);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x13', 'i', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\a', '\x2', '\x18', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '\x1B', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\a', '\x3', '!', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 
		'$', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\a', '\x4', ',', '\n', '\x4', '\f', '\x4', 
		'\xE', '\x4', '/', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x5', '\x4', '\x35', '\n', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', '=', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', 
		'\x6', '\x42', '\n', '\x6', '\f', '\x6', '\xE', '\x6', '\x45', '\v', '\x6', 
		'\x3', '\x6', '\x5', '\x6', 'H', '\n', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\a', '\t', 'T', '\n', '\t', '\f', '\t', 
		'\xE', '\t', 'W', '\v', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x5', '\t', ']', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', 
		'\n', 'g', '\n', '\n', '\x3', '\n', '\x2', '\x2', '\v', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x2', '\x4', '\x3', '\x2', 
		'\t', '\n', '\x3', '\x2', '\x10', '\x11', '\x2', 'o', '\x2', '\x14', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'\x34', '\x3', '\x2', '\x2', '\x2', '\b', '\x36', '\x3', '\x2', '\x2', 
		'\x2', '\n', 'G', '\x3', '\x2', '\x2', '\x2', '\f', 'I', '\x3', '\x2', 
		'\x2', '\x2', '\xE', 'M', '\x3', '\x2', '\x2', '\x2', '\x10', '\\', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '\x66', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\x19', '\x5', '\x4', '\x3', '\x2', '\x15', '\x16', '\a', '\x3', '\x2', 
		'\x2', '\x16', '\x18', '\x5', '\x4', '\x3', '\x2', '\x17', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x19', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x19', '\x1A', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\x3', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\x1D', '\a', '\x4', '\x2', '\x2', '\x1D', 
		'\"', '\x5', '\b', '\x5', '\x2', '\x1E', '\x1F', '\a', '\x3', '\x2', '\x2', 
		'\x1F', '!', '\x5', '\f', '\a', '\x2', ' ', '\x1E', '\x3', '\x2', '\x2', 
		'\x2', '!', '$', '\x3', '\x2', '\x2', '\x2', '\"', ' ', '\x3', '\x2', 
		'\x2', '\x2', '\"', '#', '\x3', '\x2', '\x2', '\x2', '#', '%', '\x3', 
		'\x2', '\x2', '\x2', '$', '\"', '\x3', '\x2', '\x2', '\x2', '%', '&', 
		'\a', '\x5', '\x2', '\x2', '&', '\x5', '\x3', '\x2', '\x2', '\x2', '\'', 
		'(', '\a', '\x4', '\x2', '\x2', '(', '-', '\x5', '\f', '\a', '\x2', ')', 
		'*', '\a', '\x3', '\x2', '\x2', '*', ',', '\x5', '\f', '\a', '\x2', '+', 
		')', '\x3', '\x2', '\x2', '\x2', ',', '/', '\x3', '\x2', '\x2', '\x2', 
		'-', '+', '\x3', '\x2', '\x2', '\x2', '-', '.', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x30', '\x3', '\x2', '\x2', '\x2', '/', '-', '\x3', '\x2', '\x2', 
		'\x2', '\x30', '\x31', '\a', '\x5', '\x2', '\x2', '\x31', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x32', '\x33', '\a', '\x4', '\x2', '\x2', '\x33', 
		'\x35', '\a', '\x5', '\x2', '\x2', '\x34', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\x32', '\x3', '\x2', '\x2', '\x2', '\x35', '\a', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\x37', '\a', '\xF', '\x2', '\x2', '\x37', 
		'\x38', '\a', '\x6', '\x2', '\x2', '\x38', '\x39', '\x5', '\n', '\x6', 
		'\x2', '\x39', '\t', '\x3', '\x2', '\x2', '\x2', ':', ';', '\a', '\a', 
		'\x2', '\x2', ';', '=', '\a', '\b', '\x2', '\x2', '<', ':', '\x3', '\x2', 
		'\x2', '\x2', '<', '=', '\x3', '\x2', '\x2', '\x2', '=', '>', '\x3', '\x2', 
		'\x2', '\x2', '>', '\x43', '\a', '\x10', '\x2', '\x2', '?', '@', '\t', 
		'\x2', '\x2', '\x2', '@', '\x42', '\a', '\x10', '\x2', '\x2', '\x41', 
		'?', '\x3', '\x2', '\x2', '\x2', '\x42', '\x45', '\x3', '\x2', '\x2', 
		'\x2', '\x43', '\x41', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\x3', 
		'\x2', '\x2', '\x2', '\x44', 'H', '\x3', '\x2', '\x2', '\x2', '\x45', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x46', 'H', '\a', '\x11', '\x2', 
		'\x2', 'G', '<', '\x3', '\x2', '\x2', '\x2', 'G', '\x46', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\v', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\x5', 
		'\xE', '\b', '\x2', 'J', 'K', '\a', '\x6', '\x2', '\x2', 'K', 'L', '\x5', 
		'\x12', '\n', '\x2', 'L', '\r', '\x3', '\x2', '\x2', '\x2', 'M', 'N', 
		'\t', '\x3', '\x2', '\x2', 'N', '\xF', '\x3', '\x2', '\x2', '\x2', 'O', 
		'P', '\a', '\a', '\x2', '\x2', 'P', 'U', '\x5', '\x12', '\n', '\x2', 'Q', 
		'R', '\a', '\x3', '\x2', '\x2', 'R', 'T', '\x5', '\x12', '\n', '\x2', 
		'S', 'Q', '\x3', '\x2', '\x2', '\x2', 'T', 'W', '\x3', '\x2', '\x2', '\x2', 
		'U', 'S', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\x3', '\x2', '\x2', '\x2', 
		'V', 'X', '\x3', '\x2', '\x2', '\x2', 'W', 'U', '\x3', '\x2', '\x2', '\x2', 
		'X', 'Y', '\a', '\v', '\x2', '\x2', 'Y', ']', '\x3', '\x2', '\x2', '\x2', 
		'Z', '[', '\a', '\a', '\x2', '\x2', '[', ']', '\a', '\v', '\x2', '\x2', 
		'\\', 'O', '\x3', '\x2', '\x2', '\x2', '\\', 'Z', '\x3', '\x2', '\x2', 
		'\x2', ']', '\x11', '\x3', '\x2', '\x2', '\x2', '^', 'g', '\a', '\x11', 
		'\x2', '\x2', '_', 'g', '\a', '\x12', '\x2', '\x2', '`', 'g', '\x5', '\x6', 
		'\x4', '\x2', '\x61', 'g', '\x5', '\x4', '\x3', '\x2', '\x62', 'g', '\x5', 
		'\x10', '\t', '\x2', '\x63', 'g', '\a', '\f', '\x2', '\x2', '\x64', 'g', 
		'\a', '\r', '\x2', '\x2', '\x65', 'g', '\a', '\xE', '\x2', '\x2', '\x66', 
		'^', '\x3', '\x2', '\x2', '\x2', '\x66', '_', '\x3', '\x2', '\x2', '\x2', 
		'\x66', '`', '\x3', '\x2', '\x2', '\x2', '\x66', '\x61', '\x3', '\x2', 
		'\x2', '\x2', '\x66', '\x62', '\x3', '\x2', '\x2', '\x2', '\x66', '\x63', 
		'\x3', '\x2', '\x2', '\x2', '\x66', '\x64', '\x3', '\x2', '\x2', '\x2', 
		'\x66', '\x65', '\x3', '\x2', '\x2', '\x2', 'g', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\f', '\x19', '\"', '-', '\x34', '<', '\x43', 'G', 'U', 
		'\\', '\x66',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
